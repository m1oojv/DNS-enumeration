import time
import json
import os
import glob

import luigi
from luigi.util import inherits
from luigi.contrib.external_program import ExternalProgramTask

from shodan import Shodan

from recon.amass import ParseAmassOutput

@inherits(ParseAmassOutput)
class ShodanQuery(luigi.Task):

    # SHODAN_API_KEY = "atj5KW3BHFbYUwVYWWNfP6ZhXBxvVkA8" either key works
    SHODAN_API_KEY = "0Qd1D7toXoZCUFN615yZexyfkP4Um3vb"
    api = Shodan(SHODAN_API_KEY)

    """ Takes ip addresses (from TARGET_FILE.ips and TARGET_FILE.ip6s),
        and queries against Shodan database for vulnerabilities.

    Args:
        ???????
        e.g.:
        target_file: specifies the file on disk containing a list of ips or domains *--* Required by upstream Task
        exempt_list: Path to a file providing blacklisted subdomains, one per line. *--* Optional for upstream Task
    """

    def requires(self):
        """ Shodan depends on ParseAmassOutput to run.

        TargetList expects target_file as a parameter.
        AmassScan accepts exempt_list as an optional parameter.
        ParseAmassOutput does not have additional parameters.

        Returns:
            luigi.Task - ParseAmassOutput
        """
        
        args = {"target_file": self.target_file, "exempt_list": self.exempt_list}
        return ParseAmassOutput(**args)

    def output(self):
        """ Returns the target output for this task.

        Naming convention for the output folder is results.TARGET_FILE.

        The output folder will be populated with all of the output files generated by
        any shodan commands run.  
        
        # Because the nmap command uses -oA, there will be three files per target scanned: .xml, .nmap, .gnmap.

        Returns:
            luigi.local_target.LocalTarget
        """
        return luigi.LocalTarget(f"results.{self.target_file}.json")
    
    def run(self):
        """ Calls Shodan against each ip address. """

        # read tesla.ip6s and tesla.ips into an string array of ips
        # info = ShodanQuery.api.host("8.8.8.8")
        # store each info object in the data array, which is the output json file

        # Note: No Corporate API, unable to lookup multiple (100) IPs per request

        data = []

        def queryIp(ipAddress):
            try:
                info = ShodanQuery.api.host(ipAddress)
                data.append({
                    'ip': ipAddress[:-1],
                    'apiCallSuccess': True,
                    'errorMessage': '',
                    'data': info
                })
            except Exception as err:
                data.append({
                    'ip': ipAddress[:-1],
                    'apiCallSuccess': False,
                    'errorMessage': str(err),
                    'data': {}
                })
            finally:
                time.sleep(1)
        
        with open(self.input()["target-ips"].path, 'r') as ips:
            for ip in ips:
                queryIp(ip)
                

        with open(self.input()["target-ip6s"].path, 'r') as ip6s:
            for ip6 in ip6s:
                queryIp(ip6)

        with open(self.output().path, "w") as outfile:
            json.dump(data, outfile)

        # delete intermediary files
        for filename in glob.glob(f"{self.target_file}.*"):
            os.remove(filename)

        for filename in glob.glob(f"{self.target_file}"):
            os.remove(filename)
